<!--===========================================================================
  This is the build file for the Community Dashboard Widgets Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community Dashboard Widgets" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CDW project
    and works with the common_build.xml file.
  </description>

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="common_build.xml"/>

  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

<!--
  <target name='dist-solution'>
    <copy todir="${solution.stage.dir}" overwrite='true'>
      <fileset dir='solution'>
      <include name=''>
    </copy>
  </target>
-->
  <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
      <classpath>
        <path refid="classpath"/>
      </classpath>
      <src path="${src.dir}"/>
    </javac>
  </target>

  <property name="plugin.name"
            value="cmd"
            description="Name of the plugin"/>

  <property name="resource.dir"
            value="resources"
            description="Name of the resource directory"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>

  <property name="samples.stage.dir"
            value="${bin.dir}/stage-samples"
            description="Name of the resource directory" />


  <tstamp/>

  <!-- Build the project.revision property -->
  <condition property="distribution.version" value="${project.stage}-${DSTAMP}" else="${project.stage}-${project.version}">
    <equals arg1="${project.version}" arg2="SNAPSHOT"/>
  </condition>

  <echo>distribution.version = ${distribution.version}</echo>

  <target name="dist" depends="clean,resolve,jar,dist-plugin,dist-samples"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${distribution.version}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${distribution.version}.zip"/>


  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <target name="dist-plugin" depends="jar" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </copy>


    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create the version file -->
    <echo file="${stage.dir}/${plugin.name}/VERSION.txt">${distribution.version}</echo>


    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
		 includes="${plugin.name}/**/*"
         excludes="**/Thumbs.db"/>
  </target>

  <!--=======================================================================
              dist-samples

              Creates a distribution of this project's samples
              ====================================================================-->
  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the cdf-samples folder -->
    <copy todir="${samples.stage.dir}/bi-developers" overwrite="true" >
      <fileset dir="solution/bi-developers"></fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db"
         />
  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, jar, dist-plugin,dist-samples" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy samples -->
    <copy todir="${plugin.local.install.solutions.dir}/">
      <fileset dir="${samples.stage.dir}/">
        <include name="**/*" />
      </fileset>
    </copy>

    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

  </target>

  <!--=======================================================================
    run-test

    runs a test. Actually, I have no idea what this is, so I'll just leave it commented
    ====================================================================
  <target name="run-test" depends="jar" description="Runs a test">

    <java classname="pt.webdetails.cda.CdaExecutor">
      <classpath>
        <pathelement  path="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
        <pathelement  path="${resource.dir}"/>
        <fileset dir="lib">
          <include name="**/*.jar"/>
        </fileset>

      </classpath>
    </java>


  </target-->


  <!--=======================================================================
          publish-pentaho-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
  <target name="publish-pentaho-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <ant antfile="common_build.xml" target="publish-pentaho-nojar"/>

    <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>

    <replace file="plugin-pom.xml" token="jar" value="zip"/>
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
    </antcall>

    <replace file="samples-pom.xml" token="jar" value="zip"/>
    <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="samples-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
    </antcall>

    <!-- CDA is not currently building a solutions bundle, so this is disabled for now
    <replace file="solution-pom.xml" token="jar" value="zip"/>
    <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="solution-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}"/>
    </antcall> -->
  </target>
</project>
